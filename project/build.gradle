/*
*	The android static binding generator will generate bindings for the Javascript code you specify.
*/

def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')

def bgRootDir = "$rootDir/build-tools/android-static-binding-generator"
def astParserDir = "$bgRootDir/ast-parser"
def interfaceNamesFilePath = "$bgRootDir/interfaces-names.txt"
def bindingsFilePath = "$bgRootDir/bindings.txt"
def cachedJarsFilePath = "$bgRootDir/cached.dat"

def absoluteOutDir = "$rootDir/$project.outDir"
def absoluteJsCodeDir = "$rootDir/$project.jsCodeDir"

// depends on passed jars and generated interface-names
task generateInterfaceNamesList(type: JavaExec) {
	def cachedJars = new File(cachedJarsFilePath)
	
	inputs.file(cachedJars)
	outputs.files(interfaceNamesFilePath)

	doFirst {
		main "-jar"
		
		def jarsAsStr = rootProject.jarFiles.toString();
		def jarsArr = jarsAsStr.replaceAll(/[\[\]]/, "").split(", ")
		
		def str = new LinkedList <String> ();
		str.add("interfacenamegenerator.jar")
		str.addAll(jarsArr)

		args str.toArray()
		
		cachedJars.text = jarsAsStr
	}
}

// won't run if node_modules are installed
task runNpmInstallForAstParser (type: Exec) {

	//check this way so it doesn't slow down the build by snapshot-ing the node_modules
	outputs.upToDateWhen {
		(new File("$astParserDir/node_modules")).exists()
	}

	workingDir astParserDir
	
	if(isWinOs) {
		commandLine "cmd", "/c", "npm", "install"
	}
	else {
		commandLine "npm", "install"
	}
}

// if there are new dependencies the parser will run again
task runAstParser (type: Exec) {
	
	inputs.files fileTree(dir: absoluteJsCodeDir)
	outputs.files(bindingsFilePath)
	
	workingDir astParserDir
	
	if(isWinOs) {
		commandLine "cmd", "/c", "node", "js_parser.js" , absoluteJsCodeDir, "../bindings.txt"
	}
	else {
		commandLine "node", "js_parser.js", absoluteJsCodeDir, "../bindings.txt"
	}
}

// run the static binding generator
task generateBindings(type: JavaExec) {
	
	inputs.files(bindingsFilePath)
	outputs.dir(absoluteOutDir)
	
	doFirst {
		main "-jar"
		
		def str = new LinkedList <String> ();
		str.add("staticbindinggenerator.jar")
		str.add(bindingsFilePath)
		str.add(absoluteOutDir)
		str.addAll(project.jarFiles)
		
		args str.toArray()
	}
}

runNpmInstallForAstParser.dependsOn(generateInterfaceNamesList)
runAstParser.dependsOn(runNpmInstallForAstParser)
generateBindings.dependsOn(runAstParser)